## Convenient way to retrieve the distribution version
#
# system_install_vendor_versions is a dict of vendors with associated
# version to install used by system_install_vendor_version.
#
# system_install_vendor_version extract version to install from
# system_install_vendor_versions.
#
# TODO: Do not forget to add new item when a new vendor is supported.
system_install_vendor_versions:
  alpine: '{{ system_install_alpine_version }}'
  arch: '{{ system_install_arch_version }}'
  centos: '{{ system_install_centos_version }}'
  debian: '{{ system_install_debian_version }}'
  fedora: '{{ system_install_fedora_version }}'
  opensuse: '{{ system_install_opensuse_version }}'
  ubuntu: '{{ system_install_ubuntu_version }}'
system_install_vendor_version: '{{ system_install_vendor_versions[system_install_vendor] }}'

## Python interpreter in the chroot
#
# Some old systems do not provide python 3.6. In that case python 2.x
# has to be used.
system_install_python:
  debian:
    jessie: '/usr/bin/python'
  ubuntu:
    trusty: '/usr/bin/python'
    xenial: '/usr/bin/python'

## Add debootstrap scripts for recent distributions
#
# Debootstrap is not always up-to-date. Create links to support recent
# distros.
#
# - dist: distibution name
# - def: distribution definition (link to this file)
#
# Rule of thumb: use sid for Debian and gutsy for Ubuntu. See
# /usr/share/debootstrap/scripts.
#
system_install_debootstrap_scripts:
  - { dist: eoan, def: gutsy }
  - { dist: focal, def: gutsy }

## Pseudo filesystems to mount into the chroot.
#
# Pseudo filesystems are mount using the bind option from the live
# system to the target chroot. They are required to execute specific
# tasks such as installing grub ou starting ssh server.
#
# fs:      is the path to the pseudo filesystem in the live system.
# creates: is an existing file relative to fs used to check if fs is
#          mounted.
#
# There is no reason to change this value.
system_install_pseudo_fs:
  - fs: /dev
    creates: disk
  - fs: /dev/pts
    creates: ptmx
  - fs: /proc
    creates: devices
  - fs: /run
    creates: sshd
  - fs: /sys
    creates: module


## XFS options
#
# XFSv5 is only available since kernel 4.3. See
# https://kernelnewbies.org/Linux_4.3
#
# xfsprogs 4.16.0 defaults to enabling "sparse inode" by default. Grub
# version before 2.02+dfsg1-14 do no handle properly this option. See:
# - https://lists.gnu.org/archive/html/grub-devel/2018-05/msg00046.html
# - https://packages.debian.org/sid/grub-pc (See Debian Changelog)
#
# system_install_xfs_opts is a vendor / version dict defining xfs
# options. If a key is missing, defaults options from mkfs.xfs are
# used.
system_install_xfs_options_v4: '-m crc=0,finobt=0 -i sparse=0 -n ftype=0'
system_install_xfs_options_nosparse: '-i sparse=0'
system_install_xfs_opts:
  debian:
    jessie: '{{ system_install_xfs_options_v4 }}'
    stretch: '{{ system_install_xfs_options_nosparse }}'
  ubuntu:
    trusty: '{{ system_install_xfs_options_v4 }}'
    xenial: '{{ system_install_xfs_options_nosparse }}'
    bionic: '{{ system_install_xfs_options_nosparse }}'

